{
  "address": "0xBd9385a0b6284A543631B1E67b36b256F50C13fa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Race__EntryFeeNotEnough",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Race__RaceNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Race__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raceState",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "carState",
          "type": "uint256"
        }
      ],
      "name": "Race__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "racer",
          "type": "address"
        }
      ],
      "name": "RaceEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RecentBlownTyre",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "RecentFaultyEngine",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaceWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRace",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCarState",
      "outputs": [
        {
          "internalType": "enum Race.CarState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfRacers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaceState",
      "outputs": [
        {
          "internalType": "enum Race.RaceState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRacer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_entryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x30f7bee5ff0d98fe9efb29a56a3e957f83c13976410bef955761881dfe5252ce",
  "receipt": {
    "to": null,
    "from": "0xc85e03b9171986cD0e1680d7980725Eb167dbdBb",
    "contractAddress": "0xBd9385a0b6284A543631B1E67b36b256F50C13fa",
    "transactionIndex": 17,
    "gasUsed": "1333537",
    "logsBloom": "0x
    "blockHash": "0xc9db3552e9cc82e1b419b8de3fd28c7861b5abc3e09b513edc1c4acab6e67691",
    "transactionHash": "0x30f7bee5ff0d98fe9efb29a56a3e957f83c13976410bef955761881dfe5252ce",
    "logs": [],
    "blockNumber": 11226215,
    "cumulativeGasUsed": "5897159",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "16839",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "30",
    "10000000000000000",
    "500000"
  ],
  "numDeployments": 3,
  "solcInputHash": "ade82c85145e4fbef45877f273d8168e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Race__EntryFeeNotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Race__RaceNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Race__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raceState\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"carState\",\"type\":\"uint256\"}],\"name\":\"Race__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"racer\",\"type\":\"address\"}],\"name\":\"RaceEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RecentBlownTyre\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"RecentFaultyEngine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaceWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRace\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCarState\",\"outputs\":[{\"internalType\":\"enum Race.CarState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfRacers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaceState\",\"outputs\":[{\"internalType\":\"enum Race.RaceState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRacer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_entryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Benjamin izuchukwu umeike\",\"details\":\"This implements the Chainlink VRF Version 2\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample Race Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getEntryFee()\":{\"notice\":\"Getter Functions \"}},\"notice\":\"This contract is for creating a sample race contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Race.sol\":\"Race\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Race.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Race__EntryFeeNotEnough();\\nerror Race__RaceNotOpen();\\nerror Race__TransferFailed();\\nerror Race__EngineOilNotEnough();\\nerror Race__UpkeepNotNeeded(\\n  uint256 currentBalance,\\n  uint256 numPlayers,\\n  uint256 raceState,\\n  uint256 carState\\n);\\n\\n/**@title A sample Race Contract\\n * @author Benjamin izuchukwu umeike\\n * @notice This contract is for creating a sample race contract\\n * @dev This implements the Chainlink VRF Version 2\\n */\\n\\ncontract Race is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n  /*Type declarations*/\\n  enum RaceState {\\n    OPEN, //0\\n    CALCULATING //1\\n  }\\n  enum CarState {\\n    FAULTY_ENGINE,\\n    BLOWN_TYRE\\n  }\\n\\n  /* State variables */\\n  // Chainlink VRF Variables\\n  VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n  uint64 private immutable i_subscriptionId;\\n  bytes32 private immutable i_gasLane;\\n  uint32 private immutable i_callbackGasLimit;\\n  uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n  uint32 private constant NUM_WORDS = 1;\\n\\n  //Racing varaible\\n  uint256 private immutable i_interval;\\n  uint256 public immutable i_entryFee;\\n  uint256 private s_lastTimeStamp;\\n  address private s_recentWinner;\\n  address private s_recentBlownTyre;\\n  CarState private s_carState;\\n  address payable[] private s_racers;\\n  RaceState private s_raceState;\\n\\n  /* Events */\\n  event RaceEnter(address indexed racer);\\n  event RequestedRaceWinner(uint256 indexed requestId);\\n  event RecentBlownTyre(uint256 indexed requestId);\\n  event RecentFaultyEngine(uint256 indexed _requestId);\\n  event winnerPicked(address indexed winner);\\n\\n  /* Functions */\\n  constructor(\\n    address vrfCoordinatorV2,\\n    uint64 subscriptionId,\\n    bytes32 gasLane,\\n    uint256 interval,\\n    uint256 entryFee,\\n    uint32 callbackGasLimit\\n  ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n    i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n    i_gasLane = gasLane;\\n    i_interval = interval;\\n    i_subscriptionId = subscriptionId;\\n    i_entryFee = entryFee;\\n    s_raceState = RaceState.OPEN;\\n    s_lastTimeStamp = block.timestamp;\\n    i_callbackGasLimit = callbackGasLimit;\\n  }\\n\\n  function enterRace() public payable {\\n    // require(msg.value >= i_entranceFee, \\\"Not enough value sent\\\");\\n    // require(s_raffleState == RaceState.OPEN, \\\"Race is not open\\\");\\n\\n    if (msg.value < i_entryFee) {\\n      revert Race__EntryFeeNotEnough();\\n    }\\n    if (s_raceState != RaceState.OPEN) {\\n      revert Race__RaceNotOpen();\\n    }\\n    s_racers.push(payable(msg.sender));\\n    //Emit an event when we update a dynamic array or mapping\\n    // Named events with the function name reversed\\n    emit RaceEnter(msg.sender);\\n  }\\n\\n  function checkUpkeep(\\n    bytes memory /*callData*/\\n  )\\n    public\\n    view\\n    override\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory /*performData*/\\n    )\\n  {\\n    bool isOpen = RaceState.OPEN == s_raceState;\\n    bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n    bool hasRacers = (s_racers.length > 0);\\n    bool hasBalance = address(this).balance > 0;\\n    bool EnoughEngineOilAndReinforcedTyres = CarState.FAULTY_ENGINE ==\\n      s_carState;\\n    // bool reinforcedTyres = CarState.BLOWN_TYRE == s_carState;\\n\\n    upkeepNeeded = (isOpen &&\\n      timePassed &&\\n      hasRacers &&\\n      hasBalance &&\\n      EnoughEngineOilAndReinforcedTyres);\\n    //  reinforcedTyres);\\n  }\\n\\n  function performUpkeep(\\n    bytes calldata /*performData*/\\n  ) external override {\\n    (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n    if (!upkeepNeeded) {\\n      revert Race__UpkeepNotNeeded(\\n        address(this).balance,\\n        s_racers.length,\\n        uint256(s_raceState),\\n        uint256(s_carState)\\n      );\\n    }\\n    s_raceState = RaceState.CALCULATING;\\n    s_carState = CarState.BLOWN_TYRE;\\n    uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n      i_gasLane,\\n      i_subscriptionId,\\n      REQUEST_CONFIRMATIONS,\\n      i_callbackGasLimit,\\n      NUM_WORDS\\n    );\\n    emit RequestedRaceWinner(requestId);\\n    emit RecentBlownTyre(requestId);\\n    emit RecentFaultyEngine(requestId);\\n  }\\n\\n  function fulfillRandomWords(\\n    uint256, /*requestId*/\\n    uint256[] memory randomWords\\n  ) internal override {\\n    uint256 indexOfWinner = randomWords[0] % s_racers.length;\\n    address payable recentWinner = s_racers[indexOfWinner];\\n    s_recentWinner = recentWinner;\\n    s_raceState = RaceState.OPEN;\\n    s_carState = CarState.FAULTY_ENGINE;\\n    s_racers = new address payable[](0);\\n    s_lastTimeStamp = block.timestamp;\\n    (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n    if (!success) {\\n      revert Race__TransferFailed();\\n    }\\n    emit winnerPicked(recentWinner);\\n  }\\n\\n  /** Getter Functions */\\n  function getEntryFee() public view returns (uint256) {\\n    return i_entryFee;\\n  }\\n\\n  function getRaceState() public view returns (RaceState) {\\n    return s_raceState;\\n  }\\n\\n  function getRacer(uint256 index) public view returns (address) {\\n    return s_racers[index];\\n  }\\n\\n  function getRecentWinner() public view returns (address) {\\n    return s_recentWinner;\\n  }\\n\\n  function getCarState() public view returns (CarState) {\\n    return s_carState;\\n  }\\n\\n  function getNumWords() public pure returns (uint256) {\\n    return NUM_WORDS;\\n  }\\n\\n  function getNumberOfRacers() public view returns (uint256) {\\n    return s_racers.length;\\n  }\\n\\n  function getInterval() public view returns (uint256) {\\n    return i_interval;\\n  }\\n\\n  function getLatestTimeStamp() public view returns (uint256) {\\n    return s_lastTimeStamp;\\n  }\\n\\n  function getRequestConfirmations() public pure returns (uint256) {\\n    return REQUEST_CONFIRMATIONS;\\n  }\\n}\\n\",\"keccak256\":\"0xcfff395d09667390a2e419ccfbc0fe97a73f835e73acc56d471068ce7341ae3a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001a6538038062001a65833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508261012081815250508467ffffffffffffffff1660c08167ffffffffffffffff16815250508161014081815250506000600460006101000a81548160ff0219169083600181111562000101576200010062000330565b5b0217905550426000819055508063ffffffff166101008163ffffffff16815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b600067ffffffffffffffff82169050919050565b620001b78162000198565b8114620001c357600080fd5b50565b600081519050620001d781620001ac565b92915050565b6000819050919050565b620001f281620001dd565b8114620001fe57600080fd5b50565b6000815190506200021281620001e7565b92915050565b6000819050919050565b6200022d8162000218565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001c6565b9550506040620002ea89828a0162000201565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200023c565b92505060a06200032389828a016200027d565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161168f620003d660003960008181610374015281816108650152610a5d01526000818161079d01526109d6015260006105f2015260006105ae015260006105cf0152600061057201526000818161039801526103ec015261168f6000f3fe6080604052600436106100e85760003560e01c80635f1b0fd81161008a57806391ad27b41161005957806391ad27b4146102b457806392af0633146102df578063b8ef15d91461031c578063e586a4f014610347576100e8565b80635f1b0fd8146102165780636e04ff0d1461024157806378dda1931461027f5780638d120df6146102aa576100e8565b8063320229eb116100c6578063320229eb1461016c5780634585e33b14610197578063473f1ddc146101c057806353a2c19a146101eb576100e8565b8063044cbce3146100ed5780631fe543e31461011857806325dae36d14610141575b600080fd5b3480156100f957600080fd5b50610102610372565b60405161010f9190610d9f565b60405180910390f35b34801561012457600080fd5b5061013f600480360381019061013a9190610f53565b610396565b005b34801561014d57600080fd5b50610156610456565b6040516101639190610d9f565b60405180910390f35b34801561017857600080fd5b50610181610463565b60405161018e9190610d9f565b60405180910390f35b3480156101a357600080fd5b506101be60048036038101906101b9919061100a565b61046c565b005b3480156101cc57600080fd5b506101d5610714565b6040516101e29190611098565b60405180910390f35b3480156101f757600080fd5b5061020061073e565b60405161020d9190610d9f565b60405180910390f35b34801561022257600080fd5b5061022b61074d565b6040516102389190610d9f565b60405180910390f35b34801561024d57600080fd5b5061026860048036038101906102639190611168565b61075a565b604051610276929190611254565b60405180910390f35b34801561028b57600080fd5b5061029461084c565b6040516102a191906112fb565b60405180910390f35b6102b2610863565b005b3480156102c057600080fd5b506102c96109d2565b6040516102d69190610d9f565b60405180910390f35b3480156102eb57600080fd5b5061030660048036038101906103019190611316565b6109fa565b6040516103139190611098565b60405180910390f35b34801561032857600080fd5b50610331610a42565b60405161033e919061138b565b60405180910390f35b34801561035357600080fd5b5061035c610a59565b6040516103699190610d9f565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461044857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161043f9291906113a6565b60405180910390fd5b6104528282610a81565b5050565b6000600380549050905090565b60008054905090565b60006104866040518060200160405280600081525061075a565b509050806105185747600380549050600460009054906101000a900460ff1660018111156104b7576104b6611284565b5b600260149054906101000a900460ff1660018111156104d9576104d8611284565b5b6040517fc0e51ded00000000000000000000000000000000000000000000000000000000815260040161050f94939291906113cf565b60405180910390fd5b6001600460006101000a81548160ff0219169083600181111561053e5761053d611284565b5b02179055506001600260146101000a81548160ff0219169083600181111561056957610568611284565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161063395949392919061148c565b602060405180830381600087803b15801561064d57600080fd5b505af1158015610661573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068591906114f4565b9050807fbd4dde366c56a9b292de25ad1667240e6a1a29d799817a4b1e6f1dd70269c33960405160405180910390a2807fd1186b39cac394e255eb8481225db8fba3cf147c01811fa0b45c9e8a2a9cdf2e60405160405180910390a2807f344494d30dcf0bb5138677aad43951b3c9f1ffe207e5795f73d193d65b10687560405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600460009054906101000a900460ff16600181111561078257610781611284565b5b6000600181111561079657610795611284565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600054426107ca9190611550565b119050600080600380549050119050600080471190506000600260149054906101000a900460ff16600181111561080457610803611284565b5b6000600181111561081857610817611284565b5b1490508480156108255750835b801561082e5750825b80156108375750815b80156108405750805b96505050505050915091565b6000600260149054906101000a900460ff16905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156108bd576040517f9247433a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156108d1576108d0611284565b5b600460009054906101000a900460ff1660018111156108f3576108f2611284565b5b1461092a576040517f903f073900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f8db0bc49b2b78315b5f253939c00cea7c384f9fbba182ef5e058a6e781e3b9b660405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600060038281548110610a1057610a0f611584565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600460009054906101000a900460ff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600060038054905082600081518110610a9d57610a9c611584565b5b6020026020010151610aaf91906115e2565b9050600060038281548110610ac757610ac6611584565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548160ff02191690836001811115610b5b57610b5a611284565b5b02179055506000600260146101000a81548160ff02191690836001811115610b8657610b85611284565b5b0217905550600067ffffffffffffffff811115610ba657610ba5610e10565b5b604051908082528060200260200182016040528015610bd45781602001602082028036833780820191505090505b5060039080519060200190610bea929190610cdf565b504260008190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610c1890611644565b60006040518083038185875af1925050503d8060008114610c55576040519150601f19603f3d011682016040523d82523d6000602084013e610c5a565b606091505b5050905080610c95576040517f6bfb51e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610d58579160200282015b82811115610d575782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610cff565b5b509050610d659190610d69565b5090565b5b80821115610d82576000816000905550600101610d6a565b5090565b6000819050919050565b610d9981610d86565b82525050565b6000602082019050610db46000830184610d90565b92915050565b6000604051905090565b600080fd5b600080fd5b610dd781610d86565b8114610de257600080fd5b50565b600081359050610df481610dce565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e4882610dff565b810181811067ffffffffffffffff82111715610e6757610e66610e10565b5b80604052505050565b6000610e7a610dba565b9050610e868282610e3f565b919050565b600067ffffffffffffffff821115610ea657610ea5610e10565b5b602082029050602081019050919050565b600080fd5b6000610ecf610eca84610e8b565b610e70565b90508083825260208201905060208402830185811115610ef257610ef1610eb7565b5b835b81811015610f1b5780610f078882610de5565b845260208401935050602081019050610ef4565b5050509392505050565b600082601f830112610f3a57610f39610dfa565b5b8135610f4a848260208601610ebc565b91505092915050565b60008060408385031215610f6a57610f69610dc4565b5b6000610f7885828601610de5565b925050602083013567ffffffffffffffff811115610f9957610f98610dc9565b5b610fa585828601610f25565b9150509250929050565b600080fd5b60008083601f840112610fca57610fc9610dfa565b5b8235905067ffffffffffffffff811115610fe757610fe6610faf565b5b60208301915083600182028301111561100357611002610eb7565b5b9250929050565b6000806020838503121561102157611020610dc4565b5b600083013567ffffffffffffffff81111561103f5761103e610dc9565b5b61104b85828601610fb4565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061108282611057565b9050919050565b61109281611077565b82525050565b60006020820190506110ad6000830184611089565b92915050565b600080fd5b600067ffffffffffffffff8211156110d3576110d2610e10565b5b6110dc82610dff565b9050602081019050919050565b82818337600083830152505050565b600061110b611106846110b8565b610e70565b905082815260208101848484011115611127576111266110b3565b5b6111328482856110e9565b509392505050565b600082601f83011261114f5761114e610dfa565b5b813561115f8482602086016110f8565b91505092915050565b60006020828403121561117e5761117d610dc4565b5b600082013567ffffffffffffffff81111561119c5761119b610dc9565b5b6111a88482850161113a565b91505092915050565b60008115159050919050565b6111c6816111b1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112065780820151818401526020810190506111eb565b83811115611215576000848401525b50505050565b6000611226826111cc565b61123081856111d7565b93506112408185602086016111e8565b61124981610dff565b840191505092915050565b600060408201905061126960008301856111bd565b818103602083015261127b818461121b565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106112c4576112c3611284565b5b50565b60008190506112d5826112b3565b919050565b60006112e5826112c7565b9050919050565b6112f5816112da565b82525050565b600060208201905061131060008301846112ec565b92915050565b60006020828403121561132c5761132b610dc4565b5b600061133a84828501610de5565b91505092915050565b6002811061135457611353611284565b5b50565b600081905061136582611343565b919050565b600061137582611357565b9050919050565b6113858161136a565b82525050565b60006020820190506113a0600083018461137c565b92915050565b60006040820190506113bb6000830185611089565b6113c86020830184611089565b9392505050565b60006080820190506113e46000830187610d90565b6113f16020830186610d90565b6113fe6040830185610d90565b61140b6060830184610d90565b95945050505050565b6000819050919050565b61142781611414565b82525050565b600067ffffffffffffffff82169050919050565b61144a8161142d565b82525050565b600061ffff82169050919050565b61146781611450565b82525050565b600063ffffffff82169050919050565b6114868161146d565b82525050565b600060a0820190506114a1600083018861141e565b6114ae6020830187611441565b6114bb604083018661145e565b6114c8606083018561147d565b6114d5608083018461147d565b9695505050505050565b6000815190506114ee81610dce565b92915050565b60006020828403121561150a57611509610dc4565b5b6000611518848285016114df565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061155b82610d86565b915061156683610d86565b92508282101561157957611578611521565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115ed82610d86565b91506115f883610d86565b925082611608576116076115b3565b5b828206905092915050565b600081905092915050565b50565b600061162e600083611613565b91506116398261161e565b600082019050919050565b600061164f82611621565b915081905091905056fea264697066735822122010fb95be17ac16ba52a28377d4dd4fcc902ce4498d0b289ace8d5f51ae79598f64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80635f1b0fd81161008a57806391ad27b41161005957806391ad27b4146102b457806392af0633146102df578063b8ef15d91461031c578063e586a4f014610347576100e8565b80635f1b0fd8146102165780636e04ff0d1461024157806378dda1931461027f5780638d120df6146102aa576100e8565b8063320229eb116100c6578063320229eb1461016c5780634585e33b14610197578063473f1ddc146101c057806353a2c19a146101eb576100e8565b8063044cbce3146100ed5780631fe543e31461011857806325dae36d14610141575b600080fd5b3480156100f957600080fd5b50610102610372565b60405161010f9190610d9f565b60405180910390f35b34801561012457600080fd5b5061013f600480360381019061013a9190610f53565b610396565b005b34801561014d57600080fd5b50610156610456565b6040516101639190610d9f565b60405180910390f35b34801561017857600080fd5b50610181610463565b60405161018e9190610d9f565b60405180910390f35b3480156101a357600080fd5b506101be60048036038101906101b9919061100a565b61046c565b005b3480156101cc57600080fd5b506101d5610714565b6040516101e29190611098565b60405180910390f35b3480156101f757600080fd5b5061020061073e565b60405161020d9190610d9f565b60405180910390f35b34801561022257600080fd5b5061022b61074d565b6040516102389190610d9f565b60405180910390f35b34801561024d57600080fd5b5061026860048036038101906102639190611168565b61075a565b604051610276929190611254565b60405180910390f35b34801561028b57600080fd5b5061029461084c565b6040516102a191906112fb565b60405180910390f35b6102b2610863565b005b3480156102c057600080fd5b506102c96109d2565b6040516102d69190610d9f565b60405180910390f35b3480156102eb57600080fd5b5061030660048036038101906103019190611316565b6109fa565b6040516103139190611098565b60405180910390f35b34801561032857600080fd5b50610331610a42565b60405161033e919061138b565b60405180910390f35b34801561035357600080fd5b5061035c610a59565b6040516103699190610d9f565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461044857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161043f9291906113a6565b60405180910390fd5b6104528282610a81565b5050565b6000600380549050905090565b60008054905090565b60006104866040518060200160405280600081525061075a565b509050806105185747600380549050600460009054906101000a900460ff1660018111156104b7576104b6611284565b5b600260149054906101000a900460ff1660018111156104d9576104d8611284565b5b6040517fc0e51ded00000000000000000000000000000000000000000000000000000000815260040161050f94939291906113cf565b60405180910390fd5b6001600460006101000a81548160ff0219169083600181111561053e5761053d611284565b5b02179055506001600260146101000a81548160ff0219169083600181111561056957610568611284565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161063395949392919061148c565b602060405180830381600087803b15801561064d57600080fd5b505af1158015610661573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068591906114f4565b9050807fbd4dde366c56a9b292de25ad1667240e6a1a29d799817a4b1e6f1dd70269c33960405160405180910390a2807fd1186b39cac394e255eb8481225db8fba3cf147c01811fa0b45c9e8a2a9cdf2e60405160405180910390a2807f344494d30dcf0bb5138677aad43951b3c9f1ffe207e5795f73d193d65b10687560405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600460009054906101000a900460ff16600181111561078257610781611284565b5b6000600181111561079657610795611284565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600054426107ca9190611550565b119050600080600380549050119050600080471190506000600260149054906101000a900460ff16600181111561080457610803611284565b5b6000600181111561081857610817611284565b5b1490508480156108255750835b801561082e5750825b80156108375750815b80156108405750805b96505050505050915091565b6000600260149054906101000a900460ff16905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156108bd576040517f9247433a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156108d1576108d0611284565b5b600460009054906101000a900460ff1660018111156108f3576108f2611284565b5b1461092a576040517f903f073900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f8db0bc49b2b78315b5f253939c00cea7c384f9fbba182ef5e058a6e781e3b9b660405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600060038281548110610a1057610a0f611584565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600460009054906101000a900460ff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600060038054905082600081518110610a9d57610a9c611584565b5b6020026020010151610aaf91906115e2565b9050600060038281548110610ac757610ac6611584565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548160ff02191690836001811115610b5b57610b5a611284565b5b02179055506000600260146101000a81548160ff02191690836001811115610b8657610b85611284565b5b0217905550600067ffffffffffffffff811115610ba657610ba5610e10565b5b604051908082528060200260200182016040528015610bd45781602001602082028036833780820191505090505b5060039080519060200190610bea929190610cdf565b504260008190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610c1890611644565b60006040518083038185875af1925050503d8060008114610c55576040519150601f19603f3d011682016040523d82523d6000602084013e610c5a565b606091505b5050905080610c95576040517f6bfb51e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610d58579160200282015b82811115610d575782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610cff565b5b509050610d659190610d69565b5090565b5b80821115610d82576000816000905550600101610d6a565b5090565b6000819050919050565b610d9981610d86565b82525050565b6000602082019050610db46000830184610d90565b92915050565b6000604051905090565b600080fd5b600080fd5b610dd781610d86565b8114610de257600080fd5b50565b600081359050610df481610dce565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e4882610dff565b810181811067ffffffffffffffff82111715610e6757610e66610e10565b5b80604052505050565b6000610e7a610dba565b9050610e868282610e3f565b919050565b600067ffffffffffffffff821115610ea657610ea5610e10565b5b602082029050602081019050919050565b600080fd5b6000610ecf610eca84610e8b565b610e70565b90508083825260208201905060208402830185811115610ef257610ef1610eb7565b5b835b81811015610f1b5780610f078882610de5565b845260208401935050602081019050610ef4565b5050509392505050565b600082601f830112610f3a57610f39610dfa565b5b8135610f4a848260208601610ebc565b91505092915050565b60008060408385031215610f6a57610f69610dc4565b5b6000610f7885828601610de5565b925050602083013567ffffffffffffffff811115610f9957610f98610dc9565b5b610fa585828601610f25565b9150509250929050565b600080fd5b60008083601f840112610fca57610fc9610dfa565b5b8235905067ffffffffffffffff811115610fe757610fe6610faf565b5b60208301915083600182028301111561100357611002610eb7565b5b9250929050565b6000806020838503121561102157611020610dc4565b5b600083013567ffffffffffffffff81111561103f5761103e610dc9565b5b61104b85828601610fb4565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061108282611057565b9050919050565b61109281611077565b82525050565b60006020820190506110ad6000830184611089565b92915050565b600080fd5b600067ffffffffffffffff8211156110d3576110d2610e10565b5b6110dc82610dff565b9050602081019050919050565b82818337600083830152505050565b600061110b611106846110b8565b610e70565b905082815260208101848484011115611127576111266110b3565b5b6111328482856110e9565b509392505050565b600082601f83011261114f5761114e610dfa565b5b813561115f8482602086016110f8565b91505092915050565b60006020828403121561117e5761117d610dc4565b5b600082013567ffffffffffffffff81111561119c5761119b610dc9565b5b6111a88482850161113a565b91505092915050565b60008115159050919050565b6111c6816111b1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112065780820151818401526020810190506111eb565b83811115611215576000848401525b50505050565b6000611226826111cc565b61123081856111d7565b93506112408185602086016111e8565b61124981610dff565b840191505092915050565b600060408201905061126960008301856111bd565b818103602083015261127b818461121b565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106112c4576112c3611284565b5b50565b60008190506112d5826112b3565b919050565b60006112e5826112c7565b9050919050565b6112f5816112da565b82525050565b600060208201905061131060008301846112ec565b92915050565b60006020828403121561132c5761132b610dc4565b5b600061133a84828501610de5565b91505092915050565b6002811061135457611353611284565b5b50565b600081905061136582611343565b919050565b600061137582611357565b9050919050565b6113858161136a565b82525050565b60006020820190506113a0600083018461137c565b92915050565b60006040820190506113bb6000830185611089565b6113c86020830184611089565b9392505050565b60006080820190506113e46000830187610d90565b6113f16020830186610d90565b6113fe6040830185610d90565b61140b6060830184610d90565b95945050505050565b6000819050919050565b61142781611414565b82525050565b600067ffffffffffffffff82169050919050565b61144a8161142d565b82525050565b600061ffff82169050919050565b61146781611450565b82525050565b600063ffffffff82169050919050565b6114868161146d565b82525050565b600060a0820190506114a1600083018861141e565b6114ae6020830187611441565b6114bb604083018661145e565b6114c8606083018561147d565b6114d5608083018461147d565b9695505050505050565b6000815190506114ee81610dce565b92915050565b60006020828403121561150a57611509610dc4565b5b6000611518848285016114df565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061155b82610d86565b915061156683610d86565b92508282101561157957611578611521565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115ed82610d86565b91506115f883610d86565b925082611608576116076115b3565b5b828206905092915050565b600081905092915050565b50565b600061162e600083611613565b91506116398261161e565b600082019050919050565b600061164f82611621565b915081905091905056fea264697066735822122010fb95be17ac16ba52a28377d4dd4fcc902ce4498d0b289ace8d5f51ae79598f64736f6c63430008090033",
  "devdoc": {
    "author": "Benjamin izuchukwu umeike",
    "details": "This implements the Chainlink VRF Version 2",
    "kind": "dev",
    "methods": {},
    "title": "A sample Race Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getEntryFee()": {
        "notice": "Getter Functions "
      }
    },
    "notice": "This contract is for creating a sample race contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 894,
        "contract": "contracts/Race.sol:Race",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 896,
        "contract": "contracts/Race.sol:Race",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 898,
        "contract": "contracts/Race.sol:Race",
        "label": "s_recentBlownTyre",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 901,
        "contract": "contracts/Race.sol:Race",
        "label": "s_carState",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(CarState)873"
      },
      {
        "astId": 904,
        "contract": "contracts/Race.sol:Race",
        "label": "s_racers",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 907,
        "contract": "contracts/Race.sol:Race",
        "label": "s_raceState",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(RaceState)870"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(CarState)873": {
        "encoding": "inplace",
        "label": "enum Race.CarState",
        "numberOfBytes": "1"
      },
      "t_enum(RaceState)870": {
        "encoding": "inplace",
        "label": "enum Race.RaceState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}